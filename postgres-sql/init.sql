CREATE TABLE TEST(
    id INTEGER
);

INSERT INTO TEST(id) VALUES(1);

CREATE TABLE TB_USER(
    USER_SN SERIAL PRIMARY KEY,
    USER_ID VARCHAR(100) NOT NULL UNIQUE,
    USER_PW VARCHAR(1024) NOT NULL,
    USER_NM VARCHAR(100) NOT NULL, 
    USER_RF_TK VARCHAR(1024) DEFAULT NULL,
    LOGIN_FAILED_CNT INTEGER DEFAULT 0,
    FIRST_CREATE_DATE DATE DEFAULT NOW(),
    LOCKED BOOLEAN DEFAULT false,
    FIRST_CREATE_IP VARCHAR(50),
    LAST_LOGIN_IP VARCHAR(50),
    LAST_LOGIN_DATE DATE
);

COMMENT ON TABLE TB_USER IS '유저 정보 테이블';
COMMENT ON COLUMN TB_USER.USER_SN IS '유저 순번';
COMMENT ON COLUMN TB_USER.USER_ID IS '유저 ID';
COMMENT ON COLUMN TB_USER.USER_PW IS '유저 PW';
COMMENT ON COLUMN TB_USER.USER_NM IS '유저 이름';
COMMENT ON COLUMN TB_USER.LOCKED IS '유저 잠금 여부';
COMMENT ON COLUMN TB_USER.USER_RF_TK IS '유저 refresh token';
COMMENT ON COLUMN TB_USER.LOGIN_FAILED_CNT IS '유저 로그인 실패 횟수';
COMMENT ON COLUMN TB_USER.FIRST_CREATE_DATE IS '유저 최초 생성 일자';
COMMENT ON COLUMN TB_USER.FIRST_CREATE_IP IS '유저 최초 생성한 IP';
COMMENT ON COLUMN TB_USER.LAST_LOGIN_IP IS '마지막으로 로그인된 IP';
COMMENT ON COLUMN TB_USER.LAST_LOGIN_DATE IS '마지막으로 로그인된 날짜';

CREATE TABLE TB_GROUP_STATUS(
    CODE SMALLINT PRIMARY KEY,
    CODE_NM VARCHAR(50)
);

COMMENT ON TABLE TB_GROUP_STATUS IS '그룹 상태 테이블';
COMMENT ON COLUMN TB_GROUP_STATUS.CODE IS '코드 번호';
COMMENT ON COLUMN TB_GROUP_STATUS.CODE_NM IS '코드 이름';

INSERT INTO TB_GROUP_STATUS VALUES(0, '비공개');
INSERT INTO TB_GROUP_STATUS VALUES(1, '공개');
INSERT INTO TB_GROUP_STATUS VALUES(2, '폐쇄');

CREATE TABLE TB_GROUP(
    GROUP_SN SERIAL PRIMARY KEY,
    GROUP_NM VARCHAR(200) NOT NULL,
    GROUP_INTRO TEXT DEFAULT '' NOT NULL,
    OWNER_USER_SN INTEGER NOT NULL,
    GROUP_STATUS SMALLINT NOT NULL DEFAULT 1,
    CONSTRAINT GROUP_FK1 FOREIGN KEY(OWNER_USER_SN) REFERENCES TB_USER(USER_SN) ON DELETE CASCADE,
    CONSTRAINT GROUP_FK2 FOREIGN KEY(GROUP_STATUS) REFERENCES TB_GROUP_STATUS(CODE) ON DELETE CASCADE
);

COMMENT ON TABLE TB_GROUP IS '그룹 테이블';
COMMENT ON COLUMN TB_GROUP.GROUP_SN IS '그룹 순번';
COMMENT ON COLUMN TB_GROUP.GROUP_INTRO IS '그룹 소개';
COMMENT ON COLUMN TB_GROUP.GROUP_NM IS '그룹 이름';
COMMENT ON COLUMN TB_GROUP.OWNER_USER_SN IS '그룹 소유자 순번';
COMMENT ON COLUMN TB_GROUP.GROUP_STATUS IS '그룹 상태 코드';

CREATE TABLE TB_GROUP_MESSAGE_STATUS(
    CODE SMALLINT PRIMARY KEY,
    CODE_NM VARCHAR(50)
);

COMMENT ON TABLE TB_GROUP_MESSAGE_STATUS IS '그룹 메세지 상태 테이블';
COMMENT ON COLUMN TB_GROUP_MESSAGE_STATUS.CODE IS '코드 번호';
COMMENT ON COLUMN TB_GROUP_MESSAGE_STATUS.CODE_NM IS '코드 이름';

INSERT INTO TB_GROUP_MESSAGE_STATUS VALUES(0, '대기');
INSERT INTO TB_GROUP_MESSAGE_STATUS VALUES(1, '수락');
INSERT INTO TB_GROUP_MESSAGE_STATUS VALUES(2, '거절');

CREATE TABLE TB_GROUP_MESSAGE(
    MESSAGE_SN SERIAL PRIMARY KEY,
    MESSAGE_CN TEXT NOT NULL DEFAULT '',
    GROUP_SN INTEGER NOT NULL,
    FROM_USER_SN INTEGER NOT NULL,
    TO_USER_SN INTEGER NOT NULL,
    MESSAGE_STATUS SMALLINT NOT NULL DEFAULT 0,
    CONSTRAINT GROUP_MESSAGE_FK1 FOREIGN KEY(GROUP_SN) REFERENCES TB_GROUP(GROUP_SN) ON DELETE CASCADE,
    CONSTRAINT GROUP_MESSAGE_FK2 FOREIGN KEY(FROM_USER_SN) REFERENCES TB_USER(USER_SN) ON DELETE CASCADE,
    CONSTRAINT GROUP_MESSAGE_FK3 FOREIGN KEY(TO_USER_SN) REFERENCES TB_USER(USER_SN) ON DELETE CASCADE,
    CONSTRAINT GROUP_MESSAGE_FK4 FOREIGN KEY(MESSAGE_STATUS) REFERENCES TB_GROUP_MESSAGE_STATUS(CODE) ON DELETE CASCADE
);

COMMENT ON TABLE TB_GROUP_MESSAGE IS '그룹 메세지 테이블';
COMMENT ON COLUMN TB_GROUP_MESSAGE.MESSAGE_SN IS '메세지 순번';
COMMENT ON COLUMN TB_GROUP_MESSAGE.MESSAGE_CN IS '메세지 내용';
COMMENT ON COLUMN TB_GROUP_MESSAGE.GROUP_SN IS '그룹 순번';
COMMENT ON COLUMN TB_GROUP_MESSAGE.FROM_USER_SN IS '요청자 아이디 순번';
COMMENT ON COLUMN TB_GROUP_MESSAGE.TO_USER_SN IS ' 수락자 아이디 순번';
COMMENT ON COLUMN TB_GROUP_MESSAGE.MESSAGE_STATUS IS '메세지 상태 코드';

CREATE TABLE TB_GROUP_ROLE(
    ROLE_ID VARCHAR(50) PRIMARY KEY,
    ROLE_NM VARCHAR(50),
    GROUP_SN INTEGER,
    CONSTRAINT GROUP_ROLE_FK1 FOREIGN KEY(GROUP_SN) REFERENCES TB_GROUP(GROUP_SN) ON DELETE CASCADE
);

COMMENT ON TABLE TB_GROUP_ROLE IS '그룹 메세지 상태 테이블';
COMMENT ON COLUMN TB_GROUP_ROLE.ROLE_ID IS '권한 아이디';
COMMENT ON COLUMN TB_GROUP_ROLE.ROLE_NM IS '권한 이름';
COMMENT ON COLUMN TB_GROUP_ROLE.GROUP_SN IS '그룹 순번 (NULL일시 전역 권한)';

INSERT INTO TB_GROUP_ROLE VALUES('ROLE_000', '개설자', NULL); -- SUPER 유저, 관리자보다 상위.
INSERT INTO TB_GROUP_ROLE VALUES('ROLE_100', '관리자', NULL); -- SUPER 유저보다 한단계 낮음.
INSERT INTO TB_GROUP_ROLE VALUES('ROLE_200', '일반 사용자', NULL); -- 권한 수준은 값이 낮을수록 높음

CREATE TABLE TB_GROUP_MEMBER(
    MEMBER_SN SERIAL PRIMARY KEY,
    GROUP_SN INTEGER NOT NULL,
    USER_SN INTEGER NOT NULL,
    GROUP_ROLE VARCHAR(50) NOT NULL,
    CONSTRAINT GROUP_MEMBER_UK1 UNIQUE(GROUP_SN, USER_SN), -- 그룹 중복 가입 방지
    CONSTRAINT GROUP_MEMBER_FK1 FOREIGN KEY(GROUP_SN) REFERENCES TB_GROUP(GROUP_SN) ON DELETE CASCADE,
    CONSTRAINT GROUP_MEMBER_FK2 FOREIGN KEY(USER_SN) REFERENCES TB_USER(USER_SN) ON DELETE CASCADE,
    CONSTRAINT GROUP_MEMBER_FK3 FOREIGN KEY(GROUP_ROLE) REFERENCES TB_GROUP_ROLE(ROLE_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_GROUP_MEMBER IS '그룹 멤버 테이블';
COMMENT ON COLUMN TB_GROUP_MEMBER.MEMBER_SN IS '멤버 순번';
COMMENT ON COLUMN TB_GROUP_MEMBER.GROUP_SN IS '그룹 순번';
COMMENT ON COLUMN TB_GROUP_MEMBER.USER_SN IS '유저 순번';
COMMENT ON COLUMN TB_GROUP_MEMBER.GROUP_ROLE IS '그룹 권한';

CREATE TABLE TB_CATEGORY( /* 카테고리는 페어끼리 공유 */
    CATEGORY_SN SERIAL PRIMARY KEY,
    GROUP_SN INTEGER NOT NULL,
    CATEGORY_NM VARCHAR(1000),
    OTHER_COLUMN TEXT NOT NULL DEFAULT '[]', /* 다른 컬럼은 String List 형식으로 관리함 */
    CONSTRAINT CATEGORY_FK FOREIGN KEY(GROUP_SN) REFERENCES TB_GROUP(GROUP_SN) ON DELETE CASCADE
);

COMMENT ON TABLE TB_CATEGORY IS '카테고리 테이블';
COMMENT ON COLUMN TB_CATEGORY.CATEGORY_SN IS '카테고리 순번';
COMMENT ON COLUMN TB_CATEGORY.OTHER_COLUMN IS '이외 정보 컬럼 (STRING LIST)';
COMMENT ON COLUMN TB_CATEGORY.GROUP_SN IS '그룹 순번';
COMMENT ON COLUMN TB_CATEGORY.CATEGORY_NM IS '카테고리 이름';


/*  - OTHER 정보를 넣은 의도: 이 카테고리는 이런 컬럼들을 더 가지고 있어야해! (ALTER COLUMN을 쓰지않는 확장성과 사용자의 자유도 높임)
    - OTHER 정보 사용 방법
      1. OTHER_COLUMN에 컬럼 명을 집어넣는다. (ex. ['a', 'b', 'c'])
      2. OTHER_COLUMN의 컬럼 명에 맞게 JSONObject를 생성한다. (ex. {a : 1, b: 2, c: 3})
      3. 생성한 JSONObject를 OTHER_DATA에 Push 한다. 
*/

CREATE TABLE TB_ACCOUNT_BOOK(
    AB_SN SERIAL PRIMARY KEY,
    CATEGORY_SN INTEGER NOT NULL,
    PRICE INTEGER NOT NULL,
    PLACE VARCHAR(1024) NOT NULL DEFAULT '',
    OTHER_DATA TEXT NOT NULL DEFAULT '[]', /* 다른 컬럼 데이터는 JSONOBJECT List 형식으로 관리함 */
    CONSTRAINT AB_FK FOREIGN KEY(CATEGORY_SN) REFERENCES TB_CATEGORY(CATEGORY_SN) ON DELETE CASCADE
);

COMMENT ON TABLE TB_ACCOUNT_BOOK IS '가계부 테이블';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.AB_SN IS '가계부 순번';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.CATEGORY_SN IS '카테고리 순번';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.PRICE IS '요금';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.PLACE IS '요금 사용 장소';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.OTHER_DATA IS '이외 정보 데이터 (JSONOBJECT LIST)';

CREATE TABLE TB_AB_COMMENT(
    COMMENT_SN SERIAL PRIMARY KEY,
    AB_SN INTEGER NOT NULL,
    COMMENT TEXT NOT NULL DEFAULT '',
    UPPER_COMMENT_SN INTEGER DEFAULT NULL,
    CONSTRAINT COMMENT_FK_1 FOREIGN KEY(AB_SN) REFERENCES TB_ACCOUNT_BOOK(AB_SN) ON DELETE CASCADE,
    CONSTRAINT COMMENT_FK_2 FOREIGN KEY(UPPER_COMMENT_SN) REFERENCES TB_AB_COMMENT(COMMENT_SN) ON DELETE CASCADE
);

COMMENT ON TABLE TB_AB_COMMENT IS '가계부 댓글 테이블';
COMMENT ON COLUMN TB_AB_COMMENT.AB_SN IS '가계부 순번';
COMMENT ON COLUMN TB_AB_COMMENT.COMMENT_SN IS '코멘트 순번';
COMMENT ON COLUMN TB_AB_COMMENT.COMMENT IS '코멘트 내용';
COMMENT ON COLUMN TB_AB_COMMENT.UPPER_COMMENT_SN IS '코멘트 대댓글시 상위 댓글 순번';


CREATE TABLE TB_MENU(
    MENU_SN SERIAL PRIMARY KEY,
    MENU_NM VARCHAR(100) NOT NULL DEFAULT '',
    UPPER_MENU_SN INTEGER, /* NULLABLE */
    GROUP_SN INTEGER NOT NULL,
    CONSTRAINT MENU_FK_1 FOREIGN KEY(UPPER_MENU_SN) REFERENCES TB_MENU(MENU_SN) ON DELETE CASCADE,
    CONSTRAINT MENU_FK_2 FOREIGN KEY(GROUP_SN) REFERENCES TB_GROUP(GROUP_SN) ON DELETE CASCADE
);

COMMENT ON TABLE TB_MENU IS '메뉴 테이블';
COMMENT ON COLUMN TB_MENU.MENU_SN IS '메뉴 순번';
COMMENT ON COLUMN TB_MENU.MENU_NM IS '메뉴 이름';
COMMENT ON COLUMN TB_MENU.UPPER_MENU_SN IS '상위 메뉴 순번';


/* 카테고리는 여러개의 메뉴에 있을 수 있고 메뉴는 여러개의 카테고리를 가질 수 있음 */
CREATE TABLE TB_MENU_CATEGORY_RELATION(
    MCR_SN SERIAL PRIMARY KEY,
    MENU_SN INTEGER NOT NULL,
    CATEGORY_SN INTEGER NOT NULL,
    CONSTRAINT MENU_CATEGORY_FK_1 FOREIGN KEY(MENU_SN) REFERENCES TB_MENU(MENU_SN) ON DELETE CASCADE,
    CONSTRAINT MENU_CATEGORY_FK_2 FOREIGN KEY(CATEGORY_SN) REFERENCES TB_CATEGORY(CATEGORY_SN) ON DELETE CASCADE
); 

COMMENT ON TABLE TB_MENU_CATEGORY_RELATION IS '메뉴 - 카테고리 관계 테이블';
COMMENT ON COLUMN TB_MENU_CATEGORY_RELATION.CATEGORY_SN IS '카테고리 순번';
COMMENT ON COLUMN TB_MENU_CATEGORY_RELATION.MENU_SN IS '메뉴 순번';


