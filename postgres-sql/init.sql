CREATE TABLE TEST(
    id INTEGER
);

INSERT INTO TEST(id) VALUES(1);

CREATE TABLE TB_USER(
    USER_SN SERIAL PRIMARY KEY,
    USER_ID VARCHAR(100) NOT NULL UNIQUE,
    USER_PW VARCHAR(50) NOT NULL,
    USER_NM VARCHAR(100) NOT NULL, 
    USER_RF_TK VARCHAR(1024) DEFAULT NULL,
    LOGIN_FAILED_CNT INTEGER DEFAULT 0,
    FIRST_CREATE_DATE DATE DEFAULT NOW(),
    LOCKED BOOLEAN DEFAULT false,
    FIRST_CREATE_IP VARCHAR(50),
    LAST_LOGIN_IP VARCHAR(50),
    LAST_LOGIN_DATE DATE
);

COMMENT ON TABLE TB_USER IS '유저 정보 테이블';
COMMENT ON COLUMN TB_USER.USER_SN IS '유저 순번';
COMMENT ON COLUMN TB_USER.USER_ID IS '유저 ID';
COMMENT ON COLUMN TB_USER.USER_PW IS '유저 PW';
COMMENT ON COLUMN TB_USER.USER_NM IS '유저 이름';
COMMENT ON COLUMN TB_USER.LOCKED IS '유저 잠금 여부';
COMMENT ON COLUMN TB_USER.USER_RF_TK IS '유저 refresh token';
COMMENT ON COLUMN TB_USER.LOGIN_FAILED_CNT IS '유저 로그인 실패 횟수';
COMMENT ON COLUMN TB_USER.FIRST_CREATE_DATE IS '유저 최초 생성 일자';
COMMENT ON COLUMN TB_USER.FIRST_CREATE_IP IS '유저 최초 생성한 IP';
COMMENT ON COLUMN TB_USER.LAST_LOGIN_IP IS '마지막으로 로그인된 IP';
COMMENT ON COLUMN TB_USER.LAST_LOGIN_DATE IS '마지막으로 로그인된 날짜';

CREATE TABLE TB_PAIR_ACCEPT_CODE(
    CODE SMALLINT PRIMARY KEY,
    CODE_NAME VARCHAR(20) NOT NULL
);

COMMENT ON TABLE TB_PAIR_ACCEPT_CODE IS '페어 상태 코드 테이블';
COMMENT ON COLUMN TB_PAIR_ACCEPT_CODE.CODE IS '코드 번호';
COMMENT ON COLUMN TB_PAIR_ACCEPT_CODE.CODE_NAME IS '코드 이름';

INSERT INTO TB_PAIR_ACCEPT_CODE VALUES(0, '대기');
INSERT INTO TB_PAIR_ACCEPT_CODE VALUES(1, '수락');
INSERT INTO TB_PAIR_ACCEPT_CODE VALUES(2, '거부');

CREATE TABLE TB_PAIR(
    PAIR_SN SERIAL PRIMARY KEY,
    USER_SN_FROM INTEGER UNIQUE NOT NULL, /* 페어 요청자 */
    USER_SN_TO INTEGER UNIQUE, /* 페어 수락자 */
    PAIR_MSG TEXT DEFAULT '',
    ACCEPT SMALLINT DEFAULT 0, /* 0은 대기, 1은 수락, 2는 거부 */
    CONSTRAINT PAIR_FK_1 FOREIGN KEY(USER_SN_FROM) REFERENCES TB_USER(USER_SN) ON DELETE CASCADE,
    CONSTRAINT PAIR_FK_2 FOREIGN KEY(USER_SN_TO) REFERENCES TB_USER(USER_SN) ON DELETE CASCADE,
    CONSTRAINT PAIR_FK_3 FOREIGN KEY(ACCEPT) REFERENCES TB_PAIR_ACCEPT_CODE(CODE) ON DELETE SET NULL 
);

COMMENT ON TABLE TB_PAIR IS '유저 페어 테이블';
COMMENT ON COLUMN TB_PAIR.PAIR_SN IS '페어 순번';
COMMENT ON COLUMN TB_PAIR.USER_SN_FROM IS '페어 요청자';
COMMENT ON COLUMN TB_PAIR.USER_SN_TO IS '페어 수락자';
COMMENT ON COLUMN TB_PAIR.PAIR_MSG IS '페어 메세지';
COMMENT ON COLUMN TB_PAIR.ACCEPT IS '페어 수락 여부';

CREATE TABLE TB_CATEGORY( /* 카테고리는 페어끼리 공유 */
    CATEGORY_SN SERIAL PRIMARY KEY,
    PAIR_SN INTEGER NOT NULL,
    CATEGORY_NM VARCHAR(1000),
    OTHTER_COLUMN TEXT DEFAULT '[]', /* 다른 컬럼은 String List 형식으로 관리함 */
    CONSTRAINT CATEGORY_FK FOREIGN KEY(PAIR_SN) REFERENCES TB_PAIR(PAIR_SN)
);

COMMENT ON TABLE TB_CATEGORY IS '카테고리 테이블';
COMMENT ON COLUMN TB_CATEGORY.CATEGORY_SN IS '카테고리 순번';
COMMENT ON COLUMN TB_CATEGORY.OTHTER_COLUMN IS '이외 정보 컬럼 (STRING LIST)';
COMMENT ON COLUMN TB_CATEGORY.PAIR_SN IS '페어 순번';
COMMENT ON COLUMN TB_CATEGORY.CATEGORY_NM IS '카테고리 이름';


/*  - OTHER 정보를 넣은 의도: 이 카테고리는 이런 컬럼들을 더 가지고 있어야해! (ALTER COLUMN을 쓰지않는 확장성과 사용자의 자유도 높임)
    - OTHER 정보 사용 방법
      1. OTHER_COLUMN에 컬럼 명을 집어넣는다. (ex. ['a', 'b', 'c'])
      2. OTHER_COLUMN의 컬럼 명에 맞게 JSONObject를 생성한다. (ex. {a : 1, b: 2, c: 3})
      3. 생성한 JSONObject를 OTHER_DATA에 Push 한다. 
*/

CREATE TABLE TB_ACCOUNT_BOOK(
    AB_SN SERIAL PRIMARY KEY,
    CATEGORY_SN INTEGER NOT NULL,
    PRICE INTEGER NOT NULL,
    PLACE VARCHAR(1024) NOT NULL DEFAULT '',
    OTHTER_DATA TEXT DEFAULT '[]', /* 다른 컬럼 데이터는 JSONOBJECT List 형식으로 관리함 */
    CONSTRAINT AB_FK FOREIGN KEY(CATEGORY_SN) REFERENCES TB_CATEGORY(CATEGORY_SN)
);

COMMENT ON TABLE TB_ACCOUNT_BOOK IS '가계부 테이블';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.AB_SN IS '가계부 순번';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.CATEGORY_SN IS '카테고리 순번';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.PRICE IS '요금';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.PLACE IS '요금 사용 장소';
COMMENT ON COLUMN TB_ACCOUNT_BOOK.OTHTER_DATA IS '이외 정보 데이터 (JSONOBJECT LIST)';

CREATE TABLE TB_AB_COMMENT(
    COMMENT_SN SERIAL PRIMARY KEY,
    AB_SN INTEGER NOT NULL,
    COMMENT TEXT NOT NULL DEFAULT '',
    UPPER_COMMENT_SN INTEGER DEFAULT NULL,
    CONSTRAINT COMMENT_FK_1 FOREIGN KEY(AB_SN) REFERENCES TB_ACCOUNT_BOOK(AB_SN) ON DELETE CASCADE,
    CONSTRAINT COMMENT_FK_2 FOREIGN KEY(UPPER_COMMENT_SN) REFERENCES TB_AB_COMMENT(COMMENT_SN) ON DELETE CASCADE
);

COMMENT ON TABLE TB_AB_COMMENT IS '가계부 댓글 테이블';
COMMENT ON COLUMN TB_AB_COMMENT.AB_SN IS '가계부 순번';
COMMENT ON COLUMN TB_AB_COMMENT.COMMENT_SN IS '코멘트 순번';
COMMENT ON COLUMN TB_AB_COMMENT.COMMENT IS '코멘트 내용';
COMMENT ON COLUMN TB_AB_COMMENT.UPPER_COMMENT_SN IS '코멘트 대댓글시 상위 댓글 순번';


CREATE TABLE TB_MENU(
    MENU_SN SERIAL PRIMARY KEY,
    MENU_NM VARCHAR(100) NOT NULL DEFAULT '',
    UPPER_MENU_SN INTEGER, /* NULLABLE */
    CONSTRAINT MENU_FK_1 FOREIGN KEY(UPPER_MENU_SN) REFERENCES TB_MENU(MENU_SN) ON DELETE CASCADE
);

COMMENT ON TABLE TB_MENU IS '메뉴 테이블';
COMMENT ON COLUMN TB_MENU.MENU_SN IS '메뉴 순번';
COMMENT ON COLUMN TB_MENU.MENU_NM IS '메뉴 이름';
COMMENT ON COLUMN TB_MENU.UPPER_MENU_SN IS '상위 메뉴 순번';


/* 카테고리는 여러개의 메뉴에 있을 수 있고 메뉴는 여러개의 카테고리를 가질 수 있음 */
CREATE TABLE TB_MENU_CATEGORY_RELATION(
    CR_SN SERIAL PRIMARY KEY,
    MENU_SN INTEGER NOT NULL,
    CATEGORY_SN INTEGER NOT NULL,
    CONSTRAINT MENU_CATEGORY_FK_1 FOREIGN KEY(MENU_SN) REFERENCES TB_MENU(MENU_SN) ON DELETE CASCADE,
    CONSTRAINT MENU_CATEGORY_FK_2 FOREIGN KEY(CATEGORY_SN) REFERENCES TB_CATEGORY(CATEGORY_SN) ON DELETE CASCADE
); 

COMMENT ON TABLE TB_MENU_CATEGORY_RELATION IS '메뉴 - 카테고리 관계 테이블';
COMMENT ON COLUMN TB_MENU_CATEGORY_RELATION.CATEGORY_SN IS '카테고리 순번';
COMMENT ON COLUMN TB_MENU_CATEGORY_RELATION.MENU_SN IS '메뉴 순번';


